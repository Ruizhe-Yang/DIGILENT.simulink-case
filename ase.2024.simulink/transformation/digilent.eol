var randomMap = new Map;
var temperature_CMap = new Map;
var original_reading;
var new_reading = new Map;
var true_value = 0.9000009;
var standardT = 25.0;
var temperature = -40; //[-40,125]


"Begin...".println();
//showAllBlocksInformation();
init();
//execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E"});
//execute(Sequence{"E", "E", "E", "A", "A", "A", "A", "E", "E", "E", "E", "A", "A"});
//execute(Sequence{"D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"});
//execute(Sequence{"A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A"});
test_13();
test_16384();
"Done".println();

operation test_13(){
	execute(Sequence{"A", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "A", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "A", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "A", "E", "E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "A", "E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "A", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "A", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "A", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "A", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "E", "A", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "A", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "A", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "A"});
}

operation test_16384(){
	var alphabet = Sequence {"A", "B", "C", "D"};
	var number = 1;
	for (a in alphabet){
		for (b in alphabet){
			for (c in alphabet){
				for (d in alphabet){
					for (e in alphabet){
						for (f in alphabet){
							for (g in alphabet){
								number.println();
								var input = Sequence{};
								input.add(a);
								input.add(b);
								input.add(c);
								input.add("A");
								input.add("A");
								input.add("A");
								input.add("A");
								input.add(d);
								input.add(e);
								input.add(f);
								input.add(g);
								input.add("A");
								input.add("A");
								execute(input);
								number++;
							}
						}
					}
				}
			}
		}
	}
}

// inputs is a Sequence which has 13 String, ABCD.
operation execute(inputs : Sequence){
	inputs.println();
	var labels = Sequence{"Resistor", "Resistor1", "Resistor2", "Resistor3", "Resistor4", "Resistor5",
	 "Resistor6", "Source", "Op-Amp", "Op-Amp1", "Op-Amp2", "Capacitor1", "Capacitor"};
	for (i in 0.to(12)){
		setComponent(labels[i], inputs[i]);
	}
	simulate();
	new_reading.put("array", getReading("u"));
	save_reading_result(inputs);
}

operation save_reading_result(inputs : Sequence) {
	var readings = new_reading.get("array");
	var a = new T!Origin;
	a.A = inputs[0];
	a.B = inputs[1];
	a.C = inputs[2];
	a.D = inputs[3];
	a.E = inputs[4];
	a.F = inputs[5];
	a.G = inputs[6];
	a.H = inputs[7];
	a.I = inputs[8];
	a.J = inputs[9];
	a.K = inputs[10];
	a.L = inputs[11];
	a.M = inputs[12];
	a.mean = mean(readings);
	a.deta_mean = (a.mean.asReal() - true_value).abs();
	a.std = std(readings, a.mean.asReal());
	a.cost = inputs.getCost();
	("deta_mean:"+ a.deta_mean + "  std:" + a.std + "  cost:" + a.cost).println();
}

operation Sequence getCost(){
	var costs = getCosts();
	var cost = 0.0;
	for (i in 0.to(12)){
		switch(self[i]) {
		case "A": cost += costs[i].A.asReal();
		case "B": cost += costs[i].B.asReal();
		case "C": cost += costs[i].C.asReal();
		case "D": cost += costs[i].D.asReal();
		case "E": cost += costs[i].E.asReal();
		}
	}
	return cost;
}

operation setComponent(name: String, attr : String) {
	var variance = getLevelrandom(name, attr);
	var random = randomMap.get(name);
	random.Variance = variance;
	random.Seed = getRandomInt(1000);
	var constant = getLevelTC(name, attr);
	var temperature_C = temperature_CMap.get(name);
	temperature_C.Value = constant;
}

operation mean(resultSequence) {
	return resultSequence.sum()/resultSequence.size();
}

operation std(input : Sequence, mean : Real) {
	var diff = 0;
	var math = Native("java.lang.Math");
	for(i in input) {
		diff += math.pow(i - mean, 2);
	}
	return math.sqrt(diff/(input.size()-1));
}

operation simulate() {
	M.simulate();
}

operation init() {
	initMap();
	simulate();
	original_reading = getReading("u");
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

operation save_reading(readings) {
	for(r in readings) {
		var reading = new T!Origin;
		reading.Value = r;
	}
}

operation getReading(simout : String) {
	var engine = getEngine();
	return engine.getVariable(simout);
}

operation getLevelrandom(name, level) {
	var diff = getComponents().select(c|c.Name = name).first();
	var ret;
	switch(level) {
		case "A": ret = diff.A;
		case "B": ret = diff.B;
		case "C": ret = diff.C;
		case "D": ret = diff.D;
		case "E": ret = diff.E;
	}
	var rate = ret.asReal();
	var value = diff.Value.asReal();
	return (rate*value/3.0).pow(2);
}

operation getLevelTC(name, level) {
	var diff = getTemperatureCoefficients().select(c|c.Name = name).first();
	var ret;
	switch(level) {
		case "A": ret = diff.A;
		case "B": ret = diff.B;
		case "C": ret = diff.C;
		case "D": ret = diff.D;
		case "E": ret = diff.E;
	}
	return ret.asReal()*0.000001*(temperature - standardT);
}

operation simulate() {
	M.simulate();
}

@cached
operation getEngine() {
	return M.engine;
}

@cached
operation getComponents() {
	return E!Component.all;
}

operation getTemperatureCoefficients() {
	return E!Temperature_Coefficient.all;
}

operation getCosts() {
	return E!Cost.all;
}

operation initMap() {
	var components = getComponents();
	for(c in components) {
		var random = getRandom(c.Random);
		randomMap.put(c.Name, random);
	}
	var components = getTemperatureCoefficients();
	for(c in components) {
		var constant = getTemperatureCoefficient(c.Constant);
		temperature_CMap.put(c.Name, constant);
	}
}

operation getRandom(name) {
	var randoms = getAllBlocks().select(r|r.BlockType = "RandomNumber");
	return randoms.selectOne(r|r.Name.endsWith(name));
}

operation getTemperatureCoefficient(name) {
	var constants = getAllBlocks().select(r|r.BlockType = "Constant");
	return constants.selectOne(r|r.Name.endsWith(name));
}

operation singleResistor(name, level) {
	var block = getBlock(name);
	
}

operation getBlockByHandle(handle) {
	return getAllBlocks().select(b|b.handle = handle).first;
}

@cached
operation getAllBlocks() {
	return M!Block.all();
}

operation getBlock(name) {
	return getAllBlocks().select(b|b.Name = name).first();
}

operation showAllBlocksInformation(){
//	var vr = new `fl_lib/Electrical/Electrical Elements/Variable Resistor`;
//	vr.println();
	var blocks = M!Block.all;
//	blocks.println();
	for (b in blocks){
		"_______________________________________________".println();
		b.println();
		("b.Path                = "+b.Path).println();
		("b.Position            = "+b.Position).println();
		("b.Name                = "+b.Name).println();
		("b.Handle              = "+b.Handle).println();
		("b.BlockType           = "+b.BlockType).println();
		("b.PortHandles.Inport  = "+b.PortHandles.Inport).println();
		("b.PortHandles.Outport = "+b.PortHandles.Outport).println();
		("b.PortHandles.LConn   = "+b.PortHandles.LConn).println();
		("b.PortHandles.RConn   = "+b.PortHandles.RConn).println();
		for (line in b.portconnectivity){
			if (line.isDefined()){
				"+++++++++++++++++++++++".println();
				("line                  = "+line).println();
				("line.Position         = "+line.Position).println();
				("line.SrcBlock         = "+line.SrcBlock).println();
				("line.SrcPort          = "+line.SrcPort).println();
				("line.DstBlock         = "+line.DstBlock).println();
				("line.DstPort          = "+line.DstPort).println();
			}
		}
	}
}